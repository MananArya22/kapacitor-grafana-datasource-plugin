{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","queryResult","undefined","tasks","target","selectedDatabase","columns","rows","snum","i","task","toBeUsed","dbs","dbrps","_","size","j","db","createdDate","Date","created","substring","modifiedDate","modified","lastEnabledDate","row","push","parseInt","String","toDateString","id","status","tableElement","tableElements","response","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","today","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","annotationElement","annotationResult","mapToTextValue","result","databasesSet","Set","add","databaseList","Array","from","map","d","text","value","datasourceRequest","scopedVars","refId","tagKeys","allTasks","tagValues","key","keyToBeSearched"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url + \"/kapacitor/v1/tasks\";\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n      'Content-Type': 'application/json'\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({\n        data: []\n      });\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.doRequest({\n      url: this.url,\n      method: 'GET'\n    }).then(function (queryResult) {\n\n      if (queryResult == undefined || queryResult.data == undefined || queryResult.data.tasks == undefined || query == undefined || query.targets == undefined || query.targets[0] == undefined || query.targets[0].target == undefined) {\n        return {\n          data: []\n        };\n      }\n\n      var tasks = queryResult.data.tasks;\n      var selectedDatabase = query.targets[0].target;\n\n      var columns = [{\n          \"text\": \"S.No\",\n          \"type\": \"string\"\n        },\n        {\n          \"text\": \"created\",\n          \"type\": \"time\"\n        },\n        // {\"text\": \"dbrps\", \"type\": \"string\"},\n        {\n          \"text\": \"id\",\n          \"type\": \"string\"\n        },\n        {\n          \"text\": \"last-enabled\",\n          \"type\": \"time\"\n        },\n        {\n          \"text\": \"modified\",\n          \"type\": \"time\"\n        },\n        {\n          \"text\": \"status\",\n          \"type\": \"string\"\n        },\n        {\n          \"text\": \"type\",\n          \"type\": \"string\"\n        }\n        // {\"text\": \"script\", \"type\": \"string\"},\n      ];\n\n      var rows = [];\n\n      var snum = 1;\n      for (var i = 0; i < tasks.length; i++) {\n        var task = tasks[i];\n        var toBeUsed = false;\n\n        var dbs = task.dbrps;\n\n        if (dbs != undefined && _.size(dbs) > 0) {\n\n          for (var j = 0; j < _.size(dbs); j++) {\n            if (dbs[j].db == selectedDatabase) {\n              toBeUsed = true;\n            }\n          }\n        }\n\n        if (toBeUsed) {\n\n          var createdDate = new Date((task.created).substring(0, 19));\n          var modifiedDate = new Date((task.modified).substring(0, 19));\n          var lastEnabledDate = new Date((task[\"last-enabled\"]).substring(0, 19));\n\n          var row = [];\n          row.push(parseInt(String(snum)));\n          // row.push(createdDate.getFullYear()+\"/\"+(createdDate.getMonth()+1)+\"/\"+createdDate.getDay()+\" \"+createdDate.getDate());\n          row.push(createdDate.toDateString());\n          // row.push(dbNames);\n\n          row.push(task.id);\n          row.push(lastEnabledDate.toDateString());\n          row.push(modifiedDate.toDateString());\n          row.push(task.status);\n          row.push(task.type);\n          // row.push(task.script);\n          rows.push(row);\n\n          snum++;\n        }\n\n      }\n\n      var tableElement = {};\n\n      tableElement.columns = columns;\n      tableElement.rows = rows;\n      tableElement.type = \"table\";\n\n      var tableElements = [];\n      tableElements.push(tableElement);\n\n      return {\n        data: tableElements\n      };\n\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Kapacitor is reachable\",\n          title: \"Success\"\n        };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    var today = new Date();\n    var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    var dateTime = date + ' ' + time;\n\n    var annotationElement = {\n      \"annotation\": \"Kapacitor Grafana Datasource Plugin\",\n      \"time\": dateTime,\n      \"title\": \"Kapacitor Alerts List\"\n    };\n\n    annotationResult.push(annotationElement);\n    return annotationResult;\n  }\n\n  metricFindQuery(query) {\n    return this.doRequest({\n      url: this.url,\n      method: 'GET',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n\n    if (result == undefined || result.data == undefined || result.data.tasks == undefined) {\n      return {\n        data: {}\n      };\n    }\n\n    var tasks = result.data.tasks;\n\n    let databasesSet = new Set();\n\n    for (var i = 0; i < _.size(tasks); i++) {\n      var task = tasks[i];\n      var dbs = task.dbrps;\n\n      if (dbs != undefined && _.size(dbs) > 0) {\n\n        for (let j = 0; j < _.size(dbs); j++) {\n          databasesSet.add(dbs[j].db);\n        }\n      }\n    }\n\n    var databaseList = Array.from(databasesSet);\n\n    return _.map(databaseList, function (d, i) {\n      return {\n        text: d,\n        value: d\n      };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select database';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    var tagKeys = [{\n        \"text\": \"created\",\n        \"type\": \"time\"\n      },\n      // {\"text\": \"dbrps\", \"type\": \"string\"},\n      {\n        \"text\": \"id\",\n        \"type\": \"string\"\n      },\n      {\n        \"text\": \"last-enabled\",\n        \"type\": \"time\"\n      },\n      {\n        \"text\": \"modified\",\n        \"type\": \"time\"\n      },\n      {\n        \"text\": \"status\",\n        \"type\": \"string\"\n      },\n      {\n        \"text\": \"type\",\n        \"type\": \"string\"\n      }\n      // {\"text\": \"script\", \"type\": \"string\"},\n    ];\n\n    return tagKeys;\n  }\n\n  getTagValues(options) {\n    var allTasks = this.doRequest({\n      url: this.url,\n      method: 'GET',\n    });\n\n    var tagValues = [];\n\n    if (allTasks == undefined || allTasks.data == undefined || allTasks.data.tasks == undefined || options == undefined || options.key == undefined) {\n      return tagValues;\n    }\n\n    var keyToBeSearched = options.key;\n\n    var tasks = result.data.tasks;\n\n    for (var i = 0; i < _.size(tasks); i++) {\n      var task = tasks[i];\n      var value = task[keyToBeSearched];\n      tagValues.push(value);\n    }\n\n    return tagValues;\n  }\n\n}"]}